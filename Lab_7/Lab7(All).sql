use TMPKM_UNIVER;
go

--1
select MAX(AUDITORIUM.AUDITORIUM_CAPACITY)[Max capacity],
	   MIN(AUDITORIUM.AUDITORIUM_CAPACITY)[Min capacity],
	   AVG(AUDITORIUM.AUDITORIUM_CAPACITY)[Avg capacity],
	   SUM(AUDITORIUM.AUDITORIUM_CAPACITY)[Sum capacity],
	   count(*)[Auditorium capacity] from AUDITORIUM 

--2
select AUDITORIUM_TYPE.AUDITORIUM_TYPENAME,
	   MAX(AUDITORIUM.AUDITORIUM_CAPACITY)[Max capacity],
	   MIN(AUDITORIUM.AUDITORIUM_CAPACITY)[Min capacity],
	   AVG(AUDITORIUM.AUDITORIUM_CAPACITY)[Avg capacity],
	   SUM(AUDITORIUM.AUDITORIUM_CAPACITY)[Sum capacity],
	   COUNT(*)[Auditorium capacity]
	   from AUDITORIUM JOIN AUDITORIUM_TYPE 
	   on AUDITORIUM.AUDITORIUM_TYPE = AUDITORIUM_TYPE.AUDITORIUM_TYPE
	   GROUP BY AUDITORIUM_TYPE.AUDITORIUM_TYPENAME;

--3
select * from(select case 
				when PROGRESS.NOTE = 10 THEN '10'
				WHEN PROGRESS.NOTE IN(8,9) THEN '8-9'
				WHEN PROGRESS.NOTE IN(6,7) THEN '6-7'
				WHEN PROGRESS.NOTE IN(4,5) THEN '4-5' 
				else '< 4'
				end [Marks], count(*)[Capacity]
				from PROGRESS
				group by case
				WHEN PROGRESS.NOTE = 10 THEN '10'
				WHEN PROGRESS.NOTE IN(8,9) THEN '8-9'
				WHEN PROGRESS.NOTE IN(6,7) THEN '6-7'
				WHEN PROGRESS.NOTE IN(4,5) THEN '4-5'
				else '< 4'
				END) as T
				order by case[Marks]
				WHEN '10' THEN 1
				WHEN '8-9' THEN 2
				WHEN '6-7' THEN 3
				WHEN '4-5' THEN 4
				when '< 4' then 5
				end

--4                                          
select FACULTY.FACULTY, GROUP_.PROFESSION, GROUP_.COURSE, ROUND(AVG(CAST(PROGRESS.NOTE AS float(4))),2)[AVARAGE MARK] 
from STUDENT JOIN PROGRESS ON PROGRESS.IDSTUDENT = STUDENT.IDSTUDENT
JOIN GROUP_ ON STUDENT.IDGROUP = GROUP_.IDGROUP
JOIN FACULTY ON GROUP_.FACULTY = FACULTY.FACULTY
group by GROUP_.COURSE, GROUP_.PROFESSION,FACULTY.FACULTY  

select FACULTY.FACULTY, GROUP_.PROFESSION, GROUP_.COURSE, ROUND(AVG(CAST(PROGRESS.NOTE AS float(4))),2)[AVARAGE MARK] 
from STUDENT JOIN PROGRESS ON PROGRESS.IDSTUDENT = STUDENT.IDSTUDENT
JOIN GROUP_ ON STUDENT.IDGROUP = GROUP_.IDGROUP
JOIN FACULTY ON GROUP_.FACULTY = FACULTY.FACULTY
where PROGRESS.SUBJECT_ = 'ÎÀèÏ' or PROGRESS.SUBJECT_ = 'ÁÄ'
group by GROUP_.COURSE, GROUP_.PROFESSION,FACULTY.FACULTY  

--5
select GROUP_.FACULTY, GROUP_.PROFESSION, PROGRESS.SUBJECT_, ROUND(AVG(CAST(PROGRESS.NOTE AS float(4))),2)[AVARAGE MARK] 
from STUDENT JOIN PROGRESS ON PROGRESS.IDSTUDENT = STUDENT.IDSTUDENT
JOIN GROUP_ ON STUDENT.IDGROUP = GROUP_.IDGROUP
where GROUP_.FACULTY = 'ËÕ'
group BY GROUP_.FACULTY, PROGRESS.SUBJECT_, GROUP_.PROFESSION WITH ROLLUP

--6
select GROUP_.FACULTY, GROUP_.PROFESSION, PROGRESS.SUBJECT_, ROUND(AVG(CAST(PROGRESS.NOTE AS float(4))),2)[AVARAGE MARK] 
from STUDENT JOIN PROGRESS ON PROGRESS.IDSTUDENT = STUDENT.IDSTUDENT
JOIN GROUP_ ON STUDENT.IDGROUP = GROUP_.IDGROUP
where GROUP_.FACULTY = 'ËÕ'
group BY GROUP_.FACULTY, PROGRESS.SUBJECT_, GROUP_.PROFESSION WITH CUBE

--7
--UNION
select GROUP_.FACULTY, GROUP_.PROFESSION, GROUP_.COURSE, ROUND(AVG(CAST(PROGRESS.NOTE AS float(4))),2)[AVARAGE MARK] 
from STUDENT JOIN PROGRESS ON PROGRESS.IDSTUDENT = STUDENT.IDSTUDENT
JOIN GROUP_ ON STUDENT.IDGROUP = GROUP_.IDGROUP
where GROUP_.FACULTY = 'ËÕ'
group by GROUP_.COURSE, GROUP_.PROFESSION,GROUP_.FACULTY  
UNION 
select GROUP_.FACULTY, GROUP_.PROFESSION, GROUP_.COURSE, ROUND(AVG(CAST(PROGRESS.NOTE AS float(4))),2)[AVARAGE MARK] 
from STUDENT JOIN PROGRESS ON PROGRESS.IDSTUDENT = STUDENT.IDSTUDENT
JOIN GROUP_ ON STUDENT.IDGROUP = GROUP_.IDGROUP
where GROUP_.FACULTY = 'ÒÒËÏ'
group by GROUP_.COURSE, GROUP_.PROFESSION,GROUP_.FACULTY  


--UNION ALL
select GROUP_.FACULTY, GROUP_.PROFESSION, GROUP_.COURSE, ROUND(AVG(CAST(PROGRESS.NOTE AS float(4))),2)[AVARAGE MARK] 
from STUDENT JOIN PROGRESS ON PROGRESS.IDSTUDENT = STUDENT.IDSTUDENT
JOIN GROUP_ ON STUDENT.IDGROUP = GROUP_.IDGROUP
where GROUP_.FACULTY = 'ËÕ'
group by GROUP_.COURSE, GROUP_.PROFESSION,GROUP_.FACULTY  
UNION ALL
select GROUP_.FACULTY, GROUP_.PROFESSION, GROUP_.COURSE, ROUND(AVG(CAST(PROGRESS.NOTE AS float(4))),2)[AVARAGE MARK] 
from STUDENT JOIN PROGRESS ON PROGRESS.IDSTUDENT = STUDENT.IDSTUDENT
JOIN GROUP_ ON STUDENT.IDGROUP = GROUP_.IDGROUP
where GROUP_.FACULTY = 'ÒÒËÏ'
group by GROUP_.COURSE, GROUP_.PROFESSION,GROUP_.FACULTY  

--8

select GROUP_.FACULTY, GROUP_.PROFESSION
from GROUP_ 
select FACULTY.FACULTY, PROFESSION.PROFESSION
FROM FACULTY, PROFESSION


select GROUP_.FACULTY, GROUP_.PROFESSION
from GROUP_
INTERSECT 
select FACULTY.FACULTY, PROFESSION.PROFESSION
FROM FACULTY, PROFESSION

--9
select AUDITORIUM.AUDITORIUM_NAME
from AUDITORIUM
EXCEPT
select AUDITORIUM_TYPE.AUDITORIUM_TYPENAME
FROM AUDITORIUM_TYPE

--10
SELECT P1.SUBJECT_ ,P1.NOTE,
(SELECT COUNT(*) from PROGRESS P2
WHERE P2.NOTE = P1.NOTE)[Êîëè÷åñòâî]
FROM PROGRESS P1, STUDENT
GROUP BY P1.SUBJECT_,P1.NOTE
HAVING P1.NOTE in(8,9)

--11
use K_MyBase;
go
select 
	   (select count(Purchases.Id_Employee) from Purchases where Purchases.Amount_spent < 400)[Economical],
	   MAX(Products.Cost)[Most Expensive],
	   MIN(Products.Amount)[Min products],
	   MIN(Purchases.Amount_spent)[Min expences] from Products join Purchases on Products.Order_number = Purchases.Order_number
	   group by Products.Cost, Products.Amount, Purchases.Amount_spent;
go
select MAX(Products.Cost)[Max cost],
	   MIN(Products.Cost)[Min cost],
	   AVG(Products.Cost)[Avg cost],
	   SUM(Products.Amount)[Sum amount],
	   count(*)[Auditorium capacity] from Products
go
--12
use TMPKM_UNIVER;
go
--Students
	select STUDENT.IDSTUDENT, GROUP_.IDGROUP,FACULTY.FACULTY, count(GROUP_.IDGROUP)[Count_students]
	from STUDENT join GROUP_ ON STUDENT.IDGROUP = GROUP_.IDGROUP
	JOIN FACULTY ON GROUP_.FACULTY = FACULTY.FACULTY
	GROUP BY FACULTY.FACULTY,GROUP_.IDGROUP, STUDENT.IDSTUDENT WITH ROLLUP 

--Auditoriums
	select AUDITORIUM.AUDITORIUM, AUDITORIUM_TYPE.AUDITORIUM_TYPE, AUDITORIUM.AUDITORIUM_CAPACITY, COUNT(AUDITORIUM.AUDITORIUM_TYPE)[Count_auditorium], SUM(AUDITORIUM.AUDITORIUM_CAPACITY)[Sum_count]
	FROM AUDITORIUM JOIN AUDITORIUM_TYPE ON AUDITORIUM.AUDITORIUM_TYPE = AUDITORIUM_TYPE.AUDITORIUM_TYPE
	GROUP BY AUDITORIUM_TYPE.AUDITORIUM_TYPE, AUDITORIUM.AUDITORIUM_CAPACITY, AUDITORIUM.AUDITORIUM WITH ROLLUP

--Ïðè ïîìîùè cube and roleup

